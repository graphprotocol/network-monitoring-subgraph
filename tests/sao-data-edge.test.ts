import {
  assert,
  describe,
  test,
  clearStore,
  beforeAll,
  afterAll
} from "matchstick-as/assembly/index"
import { Bytes, Address, BigInt } from "@graphprotocol/graph-ts"
import { processPayload } from "../src/sao-data-edge"
import { handleOracleSet } from "../src/subgraph-availability-manager"
import { createOracleSetEvent } from "./subgraph-availability-manager-utils"

const oracleID = "0x0000000000000000000000000000000000000001"
const oracleAddress = Address.fromString(oracleID)
const txHash1 = "0x00";
const txHash2 = "0x01";

describe("Describe entity assertions", () => {
  beforeAll(() => {
    let newOracleSetEvent = createOracleSetEvent(BigInt.fromI32(0), oracleAddress)
    handleOracleSet(newOracleSetEvent)
    assert.entityCount("Oracle", 1);
  })

  afterAll(() => {
    clearStore()
  })

  test("Wrong Submitter", () => {    
    let payloadBytes = Bytes.fromHexString(
      "22d4402000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000732356339616537000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002cc657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000004c68747470733a2f2f6170692e74686567726170682e636f6d2f7375626772617068732f6e616d652f677261706870726f746f636f6c2f67726170682d6e6574776f726b2d617262697472756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    processPayload(oracleID, payloadBytes, txHash1);

    assert.entityCount("OracleConfiguration", 0)
  })

  test("Valid Submitter", () => {
    let payloadBytes = Bytes.fromHexString(
      "22d4402000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000732356339616537000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002cc657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000004c68747470733a2f2f6170692e74686567726170682e636f6d2f7375626772617068732f6e616d652f677261706870726f746f636f6c2f67726170682d6e6574776f726b2d617262697472756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    processPayload(oracleID, payloadBytes, txHash2);

    assert.entityCount("OracleConfiguration", 1);
    assert.fieldEquals("OracleConfiguration", txHash2, "commitHash", "25c9ae7")
    assert.fieldEquals("OracleConfiguration", txHash2, "minSignal", "100")
    assert.fieldEquals("OracleConfiguration", txHash2, "period", "300")
  })
})
