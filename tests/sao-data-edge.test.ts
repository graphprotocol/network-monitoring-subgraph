import {
  assert,
  describe,
  test,
  clearStore,
  beforeAll,
  afterAll
} from "matchstick-as/assembly/index"
import { newMockEvent } from "matchstick-as"
import { Bytes, Address, BigInt } from "@graphprotocol/graph-ts"
import { processPayload } from "../src/sao-data-edge"
import { handleOracleSet } from "../src/subgraph-availability-manager"
import { createOracleSetEvent } from "./subgraph-availability-manager-utils"

const oracleID = "0x0000000000000000000000000000000000000001"
const oracleAddress = Address.fromString(oracleID)
const txHash1 = "0x00";
const txHash2 = "0x01";

describe("Describe entity assertions", () => {
  beforeAll(() => {
    let newOracleSetEvent = createOracleSetEvent(BigInt.fromI32(0), oracleAddress)
    handleOracleSet(newOracleSetEvent)
    assert.entityCount("Oracle", 1);
  })

  afterAll(() => {
    clearStore()
  })

  test("Wrong Submitter", () => {
    // Payload has ORACLE_INDEX = 1
    let payloadBytes = Bytes.fromHexString(
      "b64198f600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000732356339616537000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003ec657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000002c4667333667435a4537705845755a3370387378597a46453555626748746b376b634a69433548426266676d590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c344b465971555752545a5139676e37475048433659513271313563684a665672583433657a5963776b67784200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    let event = newMockEvent()
    processPayload(oracleAddress, payloadBytes, txHash1, event.block);

    assert.entityCount("OracleConfiguration", 0)
  })

  test("Valid Submitter", () => {
    // Payload has ORACLE_INDEX = 0
    let payloadBytes = Bytes.fromHexString(
      "b64198f600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000732356339616537000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003ec657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000002c4667333667435a4537705845755a3370387378597a46453555626748746b376b634a69433548426266676d590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c344b465971555752545a5139676e37475048433659513271313563684a665672583433657a5963776b67784200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    let event = newMockEvent()
    processPayload(oracleAddress, payloadBytes, txHash2, event.block);

    assert.entityCount("OracleConfiguration", 1);
    assert.fieldEquals("OracleConfiguration", txHash2, "commitHash", "25c9ae7")
    assert.fieldEquals("OracleConfiguration", txHash2, "minSignal", "100")
    assert.fieldEquals("OracleConfiguration", txHash2, "period", "300")
    assert.fieldEquals("OracleConfiguration", txHash2, "networkSubgraphId", "Fg36gCZE7pXEuZ3p8sxYzFE5UbgHtk7kcJiC5HBbfgmY")
    assert.fieldEquals("OracleConfiguration", txHash2, "epochBlockOracleSubgraphId", "4KFYqUWRTZQ9gn7GPHC6YQ2q15chJfVrX43ezYcwkgxB")
  })
})
