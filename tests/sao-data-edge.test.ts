import {
  assert,
  describe,
  test,
  clearStore,
  beforeAll,
  afterAll
} from "matchstick-as/assembly/index"
import { newMockEvent } from "matchstick-as"
import { Bytes, Address, BigInt } from "@graphprotocol/graph-ts"
import { processPayload } from "../src/sao-data-edge"
import { handleOracleSet } from "../src/subgraph-availability-manager"
import { createOracleSetEvent } from "./subgraph-availability-manager-utils"

const oracleID = "0x0000000000000000000000000000000000000001"
const oracleAddress = Address.fromString(oracleID)
const txHash1 = "0x00";
const txHash2 = "0x01";

describe("Describe entity assertions", () => {
  beforeAll(() => {
    let newOracleSetEvent = createOracleSetEvent(BigInt.fromI32(0), oracleAddress)
    handleOracleSet(newOracleSetEvent)
    assert.entityCount("Oracle", 1);
  })

  afterAll(() => {
    clearStore()
  })

  test("Wrong Submitter", () => {
    // Payload has ORACLE_INDEX = 1
    let payloadBytes = Bytes.fromHexString(
      "b64198f600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000676302e302e3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003ec657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000002e516d5357787664385361514b36715a4b4a37787466784343476f527a476e6f6932574e7a6d4a59594a5739425859000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d514547445462337865796b43584c6457783770505833716565474d5576486d4757503453704d6b7635514a660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    let event = newMockEvent()
    processPayload(oracleAddress, payloadBytes, txHash1, event.block);

    assert.entityCount("OracleConfiguration", 0)
  })

  test("Valid Submitter", () => {
    // Payload has ORACLE_INDEX = 0
    let payloadBytes = Bytes.fromHexString(
      "b64198f600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000676302e302e3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003ec657468657265756d2c657468657265756d2f636f6e74726163742c66696c652f697066732c73756273747265616d732c66696c652f6172776561766500000000000000000000000000000000000000000000000000000000000000000000002e516d5357787664385361514b36715a4b4a37787466784343476f527a476e6f6932574e7a6d4a59594a5739425859000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d514547445462337865796b43584c6457783770505833716565474d5576486d4757503453704d6b7635514a660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010434f4e54524143545f414444524553530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000"
    ) as Bytes;

    let event = newMockEvent()
    processPayload(oracleAddress, payloadBytes, txHash2, event.block);

    assert.entityCount("OracleConfiguration", 1);
    assert.fieldEquals("OracleConfiguration", txHash2, "version", "v0.0.1")
    assert.fieldEquals("OracleConfiguration", txHash2, "minSignal", "100")
    assert.fieldEquals("OracleConfiguration", txHash2, "period", "300")
    assert.fieldEquals("OracleConfiguration", txHash2, "networkSubgraphDeploymentId", "QmSWxvd8SaQK6qZKJ7xtfxCCGoRzGnoi2WNzmJYYJW9BXY")
    assert.fieldEquals("OracleConfiguration", txHash2, "epochBlockOracleSubgraphDeploymentId", "QmQEGDTb3xeykCXLdWx7pPX3qeeGMUvHmGWP4SpMkv5QJf")
  })
})
